///////////////////////////////////////////////
//*-----------------------------------------*//
//| Auto-Generated by the Core Engine       |//
//| Direct modifications may be overwritten |//
//*-----------------------------------------*//
///////////////////////////////////////////////
#include "main.h"


// ****************************************************************
// project settings
const coreChar* const CoreApp::Settings::Name                          = "Eigengrau";
const coreChar* const CoreApp::Settings::Version                       = "1.3.0";
const coreChar* const CoreApp::Settings::IconPath                      = "data/textures/game_icon.png";
const coreChar* const CoreApp::Settings::CursorPath                    = "data/textures/default_cursor.png";
const coreBool        CoreApp::Settings::UserManagement                = true;
const coreUint8       CoreApp::Settings::Graphics::DepthSize           = 16u;
const coreUint8       CoreApp::Settings::Graphics::StencilSize         = 0u;
const coreBool        CoreApp::Settings::Graphics::AlphaChannel        = false;
const coreBool        CoreApp::Settings::Graphics::DoubleBuffer        = true;
const coreBool        CoreApp::Settings::Graphics::StereoRender        = false;
const coreUint32      CoreApp::Settings::Platform::SteamAppID[2]       = {1624320u, 2089690u};
const coreChar* const CoreApp::Settings::Platform::EpicProductID       = "7dd83e44b6984bd0b92c5b6a1850a9cb";
const coreChar* const CoreApp::Settings::Platform::EpicSandboxID   [3] = {"p-5qg8r3hlhjcsbgl4s4jp4xrauvd6wa", "p-n4dztts5qfau4wa27ccdc5yabx6vvp", "d683ed3004f1479abdf2fc4bcfdc615d"};
const coreChar* const CoreApp::Settings::Platform::EpicDeploymentID[3] = {"2914ec61294d4649b13521053c4dfb11", "c5ca5a6eacc74bfdbd8471d4dd75a78f", "64c112ed4c9d4151a814a6cc93b98070"};
const coreChar* const CoreApp::Settings::Platform::EpicClientID        = "";
const coreChar* const CoreApp::Settings::Platform::EpicClientSecret    = "";


// ****************************************************************
// compile-time settings
STATIC_ASSERT(DEFINED(_CORE_PRECISE_))

// TODO: textures, lights etc.


// ****************************************************************
// setup the application
void CoreApp::Setup()
{
    Core::Manager::Resource->Load<coreModel>  ("bullet_cone.md3",                        CORE_RESOURCE_UPDATE_AUTO,   "data/models/bullet_cone.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("bullet_cone_volume.md3",                 CORE_RESOURCE_UPDATE_AUTO,   "data/models/bullet_cone_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("bullet_final_volume.md3",                CORE_RESOURCE_UPDATE_AUTO,   "data/models/bullet_final_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("bullet_flip_volume.md3",                 CORE_RESOURCE_UPDATE_AUTO,   "data/models/bullet_flip_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("bullet_mine.md3",                        CORE_RESOURCE_UPDATE_AUTO,   "data/models/bullet_mine.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("bullet_ray.md3",                         CORE_RESOURCE_UPDATE_AUTO,   "data/models/bullet_ray.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("bullet_ray_volume.md3",                  CORE_RESOURCE_UPDATE_AUTO,   "data/models/bullet_ray_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("bullet_orb.md3",                         CORE_RESOURCE_UPDATE_AUTO,   "data/models/bullet_orb.md3");  // TODO 1: kann man wieder hinzufÃ¼gen wenn triangle-sphere intersection implementiert wurde (+ _volume weg?), CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("bullet_orb_volume.md3",                  CORE_RESOURCE_UPDATE_AUTO,   "data/models/bullet_orb_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("bullet_quad.md3",                        CORE_RESOURCE_UPDATE_AUTO,   "data/models/bullet_quad.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("bullet_quad_volume.md3",                 CORE_RESOURCE_UPDATE_AUTO,   "data/models/bullet_quad_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("bullet_rocket.md3",                      CORE_RESOURCE_UPDATE_AUTO,   "data/models/bullet_rocket.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("bullet_rocket_volume.md3",               CORE_RESOURCE_UPDATE_AUTO,   "data/models/bullet_rocket_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("bullet_spear.md3",                       CORE_RESOURCE_UPDATE_AUTO,   "data/models/bullet_spear.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("bullet_spear_volume.md3",                CORE_RESOURCE_UPDATE_AUTO,   "data/models/bullet_spear_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("bullet_surge.md3",                       CORE_RESOURCE_UPDATE_AUTO,   "data/models/bullet_surge.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("bullet_surge_volume.md3",                CORE_RESOURCE_UPDATE_AUTO,   "data/models/bullet_surge_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("bullet_triangle.md3",                    CORE_RESOURCE_UPDATE_AUTO,   "data/models/bullet_triangle.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("bullet_triangle_volume.md3",             CORE_RESOURCE_UPDATE_AUTO,   "data/models/bullet_triangle_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("bullet_view.md3",                        CORE_RESOURCE_UPDATE_AUTO,   "data/models/bullet_view.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("bullet_view_volume.md3",                 CORE_RESOURCE_UPDATE_AUTO,   "data/models/bullet_view_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("bullet_wave.md3",                        CORE_RESOURCE_UPDATE_AUTO,   "data/models/bullet_wave.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("bullet_wave_volume.md3",                 CORE_RESOURCE_UPDATE_AUTO,   "data/models/bullet_wave_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("effect_explosion.md3",                   CORE_RESOURCE_UPDATE_AUTO,   "data/models/effect_explosion.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("effect_shield.md3",                      CORE_RESOURCE_UPDATE_AUTO,   "data/models/effect_shield.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("environment_animal_01.md3",              CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_animal_01.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("environment_animal_02.md3",              CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_animal_02.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("environment_desert_01.md3",              CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_desert_01.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("environment_desert_02.md3",              CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_desert_02.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("environment_grave.md3",                  CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_grave.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("environment_pillar_01.md3",              CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_pillar_01.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("environment_pillar_02.md3",              CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_pillar_02.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("environment_pillar_03.md3",              CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_pillar_03.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("environment_pillar_04.md3",              CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_pillar_04.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("environment_plant_01.md3",               CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_plant_01.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("environment_plant_02.md3",               CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_plant_02.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("environment_plant_03.md3",               CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_plant_03.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("environment_plant_04.md3",               CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_plant_04.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("environment_plant_05.md3",               CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_plant_05.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("environment_pyramid.md3",                CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_pyramid.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("environment_sea_01.md3",                 CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_sea_01.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("environment_sea_02.md3",                 CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_sea_02.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("environment_sea_03.md3",                 CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_sea_03.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("environment_sea_04.md3",                 CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_sea_04.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("environment_stone_01.md3",               CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_stone_01.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("environment_tree_01.md3",                CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_tree_01.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("environment_tree_02.md3",                CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_tree_02.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("environment_tree_03.md3",                CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_tree_03.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("fragment_01.md3",                        CORE_RESOURCE_UPDATE_AUTO,   "data/models/fragment_01.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("fragment_02.md3",                        CORE_RESOURCE_UPDATE_AUTO,   "data/models/fragment_02.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("fragment_03.md3",                        CORE_RESOURCE_UPDATE_AUTO,   "data/models/fragment_03.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("fragment_04.md3",                        CORE_RESOURCE_UPDATE_AUTO,   "data/models/fragment_04.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("fragment_05.md3",                        CORE_RESOURCE_UPDATE_AUTO,   "data/models/fragment_05.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("fragment_06.md3",                        CORE_RESOURCE_UPDATE_AUTO,   "data/models/fragment_06.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("fragment_07.md3",                        CORE_RESOURCE_UPDATE_AUTO,   "data/models/fragment_07.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("fragment_08.md3",                        CORE_RESOURCE_UPDATE_AUTO,   "data/models/fragment_08.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("fragment_09.md3",                        CORE_RESOURCE_UPDATE_AUTO,   "data/models/fragment_09.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("object_arrow_long.md3",                  CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_arrow_long.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("object_arrow_short.md3",                 CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_arrow_short.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("object_barrier.md3",                     CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_barrier.md3");   // TODO 1: CORE_MODEL_LOAD_NO_CLUSTERS ?
    Core::Manager::Resource->Load<coreModel>  ("object_bomb_high.md3",                   CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_bomb_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("object_bomb_low.md3",                    CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_bomb_low.md3");   // TODO 1: CORE_MODEL_LOAD_NO_CLUSTERS ?
    Core::Manager::Resource->Load<coreModel>  ("object_cube_ice.md3",                    CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_cube_ice.md3");   // TODO 1: CORE_MODEL_LOAD_NO_CLUSTERS ?
    Core::Manager::Resource->Load<coreModel>  ("object_cube_rota.md3",                   CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_cube_rota.md3");   // TODO 1: CORE_MODEL_LOAD_NO_CLUSTERS ?
    Core::Manager::Resource->Load<coreModel>  ("object_cube_top.md3",                    CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_cube_top.md3");   // TODO 1: CORE_MODEL_LOAD_NO_CLUSTERS ?
    Core::Manager::Resource->Load<coreModel>  ("object_cube_volume.md3",                 CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_cube_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("object_dot.md3",                         CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_dot.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("object_fang.md3",                        CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_fang.md3");
    Core::Manager::Resource->Load<coreModel>  ("object_fang_volume.md3",                 CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_fang_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("object_paddle.md3",                      CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_paddle.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("object_penta_top.md3",                   CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_penta_top.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("object_penta_volume.md3",                CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_penta_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("object_ring.md3",                        CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_ring.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("object_sphere.md3",                      CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_sphere.md3");   // TODO 1: CORE_MODEL_LOAD_NO_CLUSTERS ?
    Core::Manager::Resource->Load<coreModel>  ("object_sphere_center.md3",               CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_sphere_center.md3");   // TODO 1: wegen bonus mission, noch benÃ¶tigt?, CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("object_spike.md3",                       CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_spike.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("object_star.md3",                        CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_star.md3");   // TODO 1: CORE_MODEL_LOAD_NO_CLUSTERS ?
    Core::Manager::Resource->Load<coreModel>  ("object_sting.md3",                       CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_sting.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("object_tetra_top.md3",                   CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_tetra_top.md3");   // TODO 1: CORE_MODEL_LOAD_NO_CLUSTERS ?
    Core::Manager::Resource->Load<coreModel>  ("object_tetra_volume.md3",                CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_tetra_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("object_tube.md3",                        CORE_RESOURCE_UPDATE_AUTO,   "data/models/object_tube.md3");   // TODO 1: CORE_MODEL_LOAD_NO_CLUSTERS ?
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_amemasu_bottom_high.md3",      CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_amemasu_bottom_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_amemasu_bottom_low.md3",       CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_amemasu_bottom_low.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_amemasu_bottom_inside.md3",    CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_amemasu_bottom_inside.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_amemasu_bottom_volume.md3",    CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_amemasu_bottom_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_amemasu_top_high.md3",         CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_amemasu_top_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_amemasu_top_low.md3",          CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_amemasu_top_low.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_amemasu_top_inside.md3",       CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_amemasu_top_inside.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_amemasu_top_volume.md3",       CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_amemasu_top_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_chol_body_high.md3",           CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_chol_body_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_chol_body_low.md3",            CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_chol_body_low.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_chol_body_volume.md3",         CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_chol_body_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_chol_fire_01.md3",             CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_chol_fire_01.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_chol_fire_02.md3",             CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_chol_fire_02.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_chol_wing_high.md3",           CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_chol_wing_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_chol_wing_low.md3",            CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_chol_wing_low.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_chol_wing_volume.md3",         CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_chol_wing_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_dharuk_boomerang.md3",         CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_dharuk_boomerang.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_dharuk_boomerang_volume.md3",  CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_dharuk_boomerang_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_dharuk_high.md3",              CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_dharuk_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_dharuk_low.md3",               CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_dharuk_low.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_dharuk_volume.md3",            CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_dharuk_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_intro_sword_blade_high.md3",   CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_intro_sword_blade_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_intro_sword_blade_low.md3",    CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_intro_sword_blade_low.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_intro_sword_blade_volume.md3", CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_intro_sword_blade_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_intro_sword_hilt_high.md3",    CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_intro_sword_hilt_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_intro_sword_hilt_low.md3",     CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_intro_sword_hilt_low.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_intro_sword_hilt_volume.md3",  CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_intro_sword_hilt_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_leviathan_body_high.md3",      CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_leviathan_body_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_leviathan_body_low.md3",       CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_leviathan_body_low.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_leviathan_body_volume.md3",    CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_leviathan_body_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_leviathan_head_high.md3",      CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_leviathan_head_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_leviathan_head_low.md3",       CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_leviathan_head_low.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_leviathan_head_volume.md3",    CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_leviathan_head_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_leviathan_tail_high.md3",      CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_leviathan_tail_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_leviathan_tail_low.md3",       CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_leviathan_tail_low.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_leviathan_tail_volume.md3",    CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_leviathan_tail_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_messier_core.md3",             CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_messier_core.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_messier_core_volume.md3",      CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_messier_core_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_messier_inside_high.md3",      CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_messier_inside_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_messier_inside_low.md3",       CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_messier_inside_low.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_messier_inside_volume.md3",    CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_messier_inside_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_messier_outside_high.md3",     CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_messier_outside_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_messier_outside_low.md3",      CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_messier_outside_low.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_messier_outside_volume.md3",   CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_messier_outside_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_body_high.md3",          CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_body_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_body_low.md3",           CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_body_low.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_track_left.md3",         CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_track_left.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_track_right.md3",        CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_track_right.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_weapon_01_01_high.md3",  CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_weapon_01_01_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_weapon_01_01_low.md3",   CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_weapon_01_01_low.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_weapon_01_02_high.md3",  CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_weapon_01_02_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_weapon_01_02_low.md3",   CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_weapon_01_02_low.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_weapon_02_01_high.md3",  CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_weapon_02_01_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_weapon_02_01_low.md3",   CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_weapon_02_01_low.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_weapon_02_02_high.md3",  CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_weapon_02_02_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_weapon_02_02_low.md3",   CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_weapon_02_02_low.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_weapon_03_01_high.md3",  CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_weapon_03_01_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_weapon_03_01_low.md3",   CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_weapon_03_01_low.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_weapon_03_02_high.md3",  CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_weapon_03_02_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_weapon_03_02_low.md3",   CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_weapon_03_02_low.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_weapon_04_01_high.md3",  CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_weapon_04_01_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_weapon_04_01_low.md3",   CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_weapon_04_01_low.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_weapon_04_02_high.md3",  CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_weapon_04_02_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_weapon_04_02_low.md3",   CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_weapon_04_02_low.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_weapon_05_01_high.md3",  CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_weapon_05_01_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_weapon_05_01_low.md3",   CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_weapon_05_01_low.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_weapon_05_02_high.md3",  CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_weapon_05_02_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_tiger_weapon_05_02_low.md3",   CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_tiger_weapon_05_02_low.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_torus_circle.md3",             CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_torus_circle.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_torus_emitter.md3",            CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_torus_emitter.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_torus_high.md3",               CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_torus_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_torus_low.md3",                CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_torus_low.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_torus_volume.md3",             CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_torus_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_vaus_companion_high.md3",      CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_vaus_companion_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_vaus_companion_low.md3",       CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_vaus_companion_low.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_vaus_companion_volume.md3",    CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_vaus_companion_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_vaus_high.md3",                CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_vaus_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_vaus_low.md3",                 CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_vaus_low.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_vaus_volume.md3",              CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_vaus_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_zeroth_body_high.md3",         CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_zeroth_body_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_zeroth_body_low.md3",          CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_zeroth_body_low.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_zeroth_body_volume.md3",       CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_zeroth_body_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_zeroth_head_high.md3",         CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_zeroth_head_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_zeroth_head_low.md3",          CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_zeroth_head_low.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_zeroth_head_volume.md3",       CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_zeroth_head_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_zeroth_leg.md3",               CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_zeroth_leg.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_zeroth_leg_volume.md3",        CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_zeroth_leg_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_zeroth_tail.md3",              CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_zeroth_tail.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_boss_zeroth_tail_volume.md3",       CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_boss_zeroth_tail_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_enemy_arrow_high.md3",              CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_enemy_arrow_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_enemy_arrow_low.md3",               CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_enemy_arrow_low.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_enemy_arrow_volume.md3",            CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_enemy_arrow_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_enemy_cinder_high.md3",             CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_enemy_cinder_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_enemy_cinder_low.md3",              CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_enemy_cinder_low.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_enemy_cinder_volume.md3",           CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_enemy_cinder_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_enemy_freezer_high.md3",            CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_enemy_freezer_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_enemy_freezer_low.md3",             CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_enemy_freezer_low.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_enemy_freezer_volume.md3",          CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_enemy_freezer_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_enemy_miner_high.md3",              CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_enemy_miner_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_enemy_miner_low.md3",               CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_enemy_miner_low.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_enemy_miner_volume.md3",            CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_enemy_miner_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_enemy_scout_high.md3",              CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_enemy_scout_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_enemy_scout_low.md3",               CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_enemy_scout_low.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_enemy_scout_volume.md3",            CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_enemy_scout_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_enemy_star_high.md3",               CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_enemy_star_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_enemy_star_low.md3",                CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_enemy_star_low.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_enemy_star_volume.md3",             CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_enemy_star_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_enemy_warrior_high.md3",            CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_enemy_warrior_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_enemy_warrior_low.md3",             CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_enemy_warrior_low.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_enemy_warrior_volume.md3",          CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_enemy_warrior_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_helper_01.md3",                     CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_helper_01.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_helper_02.md3",                     CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_helper_02.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_helper_03.md3",                     CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_helper_03.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_helper_04.md3",                     CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_helper_04.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_helper_05.md3",                     CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_helper_05.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_helper_06.md3",                     CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_helper_06.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_helper_07.md3",                     CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_helper_07.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_helper_08.md3",                     CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_helper_08.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_helper_09.md3",                     CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_helper_09.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_meteor.md3",                        CORE_RESOURCE_UPDATE_AUTO,   "data/models/environment_stone_01.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_player_def_high.md3",               CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_player_def_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_player_def_low.md3",                CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_player_def_low.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_player_atk_high.md3",               CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_player_atk_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_player_atk_low.md3",                CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_player_atk_low.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_projectone_high.md3",               CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_projectone_high.md3", CORE_MODEL_LOAD_NO_CLUSTERS);
    Core::Manager::Resource->Load<coreModel>  ("ship_projectone_low.md3",                CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_projectone_low.md3");
    Core::Manager::Resource->Load<coreModel>  ("ship_projectone_volume.md3",             CORE_RESOURCE_UPDATE_AUTO,   "data/models/ship_projectone_volume.md3", CORE_MODEL_LOAD_NO_BUFFERS);

    Core::Manager::Resource->Load<coreTexture>("effect_aim.png",                         CORE_RESOURCE_UPDATE_AUTO,   "data/textures/effect_aim.png");
    Core::Manager::Resource->Load<coreTexture>("effect_arrow.png",                       CORE_RESOURCE_UPDATE_AUTO,   "data/textures/effect_arrow.png");
    Core::Manager::Resource->Load<coreTexture>("effect_energy.png",                      CORE_RESOURCE_UPDATE_AUTO,   "data/textures/effect_energy.png");
    Core::Manager::Resource->Load<coreTexture>("effect_headlight_point.png",             CORE_RESOURCE_UPDATE_AUTO,   "data/textures/effect_headlight_point.png");
    Core::Manager::Resource->Load<coreTexture>("effect_headlight_spot.png",              CORE_RESOURCE_UPDATE_AUTO,   "data/textures/effect_headlight_spot.png");
    Core::Manager::Resource->Load<coreTexture>("effect_lightning.png",                   CORE_RESOURCE_UPDATE_AUTO,   "data/textures/effect_lightning.png");
    Core::Manager::Resource->Load<coreTexture>("effect_particle.png",                    CORE_RESOURCE_UPDATE_AUTO,   "data/textures/effect_particle.png", CORE_TEXTURE_LOAD_RG);
    Core::Manager::Resource->Load<coreTexture>("effect_rain.png",                        CORE_RESOURCE_UPDATE_AUTO,   "data/textures/effect_rain.png");
    Core::Manager::Resource->Load<coreTexture>("effect_sand.png",                        CORE_RESOURCE_UPDATE_AUTO,   "data/textures/effect_sand.png");
    Core::Manager::Resource->Load<coreTexture>("effect_shield.png",                      CORE_RESOURCE_UPDATE_AUTO,   "data/textures/effect_shield.png");
    Core::Manager::Resource->Load<coreTexture>("effect_smoke.png",                       CORE_RESOURCE_UPDATE_AUTO,   "data/textures/effect_smoke.png");
    Core::Manager::Resource->Load<coreTexture>("effect_snow.png",                        CORE_RESOURCE_UPDATE_AUTO,   "data/textures/effect_snow.png");
    Core::Manager::Resource->Load<coreTexture>("effect_soot.png",                        CORE_RESOURCE_UPDATE_AUTO,   "data/textures/effect_soot.png");
    Core::Manager::Resource->Load<coreTexture>("effect_track.png",                       CORE_RESOURCE_UPDATE_AUTO,   "data/textures/effect_track.png", CORE_TEXTURE_LOAD_NO_COMPRESS);
    Core::Manager::Resource->Load<coreTexture>("effect_wave.png",                        CORE_RESOURCE_UPDATE_AUTO,   "data/textures/effect_wave.png");
    Core::Manager::Resource->Load<coreTexture>("effect_wave_norm.png",                   CORE_RESOURCE_UPDATE_AUTO,   "data/textures/effect_wave_norm.png", CORE_TEXTURE_LOAD_RG);
    Core::Manager::Resource->Load<coreTexture>("environment_animal_diff.png",            CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_animal_diff.png");
    Core::Manager::Resource->Load<coreTexture>("environment_animal_norm.png",            CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_animal_norm.png", CORE_TEXTURE_LOAD_NO_COMPRESS);
    Core::Manager::Resource->Load<coreTexture>("environment_block_diff.png",             CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_block_diff.png");
    Core::Manager::Resource->Load<coreTexture>("environment_block_norm.png",             CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_block_norm.png", CORE_TEXTURE_LOAD_NO_COMPRESS);
    Core::Manager::Resource->Load<coreTexture>("environment_blood_diff.png",             CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_blood_diff.png");
    Core::Manager::Resource->Load<coreTexture>("environment_blood_norm.png",             CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_blood_norm.png", CORE_TEXTURE_LOAD_NO_COMPRESS);
    Core::Manager::Resource->Load<coreTexture>("environment_clouds_blue.png",            CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_clouds_blue.png", CORE_TEXTURE_LOAD_NEAREST);
    Core::Manager::Resource->Load<coreTexture>("environment_clouds_grey.png",            CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_clouds_grey.png", CORE_TEXTURE_LOAD_NEAREST);
    Core::Manager::Resource->Load<coreTexture>("environment_clouds_low.png",             CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_clouds_low.png");
    Core::Manager::Resource->Load<coreTexture>("environment_clouds_mid.png",             CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_clouds_mid.png");
    Core::Manager::Resource->Load<coreTexture>("environment_clouds_high.png",            CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_clouds_high.png");
    Core::Manager::Resource->Load<coreTexture>("environment_crack_diff.png",             CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_crack_diff.png");
    Core::Manager::Resource->Load<coreTexture>("environment_crack_norm.png",             CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_crack_norm.png", CORE_TEXTURE_LOAD_NO_COMPRESS);
    Core::Manager::Resource->Load<coreTexture>("environment_desert.png",                 CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_desert.png", CORE_TEXTURE_LOAD_NEAREST);
    Core::Manager::Resource->Load<coreTexture>("environment_dust_diff.png",              CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_dust_diff.png");
    Core::Manager::Resource->Load<coreTexture>("environment_dust_norm.png",              CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_dust_norm.png", CORE_TEXTURE_LOAD_NO_COMPRESS);
    Core::Manager::Resource->Load<coreTexture>("environment_earth_diff.png",             CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_earth_diff.png");
    Core::Manager::Resource->Load<coreTexture>("environment_earth_norm.png",             CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_earth_norm.png", CORE_TEXTURE_LOAD_NO_COMPRESS);
    Core::Manager::Resource->Load<coreTexture>("environment_flowers.png",                CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_flowers.png");
    Core::Manager::Resource->Load<coreTexture>("environment_grass_diff.png",             CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_grass_diff.png");
    Core::Manager::Resource->Load<coreTexture>("environment_grass_norm.png",             CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_grass_norm.png", CORE_TEXTURE_LOAD_NO_COMPRESS);
    Core::Manager::Resource->Load<coreTexture>("environment_grave_diff.png",             CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_grave_diff.png");
    Core::Manager::Resource->Load<coreTexture>("environment_grave_norm.png",             CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_grave_norm.png", CORE_TEXTURE_LOAD_NO_COMPRESS);
    Core::Manager::Resource->Load<coreTexture>("environment_lava_diff.png",              CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_lava_diff.png");
    Core::Manager::Resource->Load<coreTexture>("environment_lava_norm.png",              CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_lava_norm.png", CORE_TEXTURE_LOAD_NO_COMPRESS);
    Core::Manager::Resource->Load<coreTexture>("environment_leaf.png",                   CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_leaf.png");
    Core::Manager::Resource->Load<coreTexture>("environment_moss_diff.png",              CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_moss_diff.png");
    Core::Manager::Resource->Load<coreTexture>("environment_moss_norm.png",              CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_moss_norm.png", CORE_TEXTURE_LOAD_NO_COMPRESS);
    Core::Manager::Resource->Load<coreTexture>("environment_particle_01.png",            CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_particle_01.png");
    Core::Manager::Resource->Load<coreTexture>("environment_particle_02.png",            CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_particle_02.png");
    Core::Manager::Resource->Load<coreTexture>("environment_pillar_01_diff.png",         CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_pillar_01_diff.png");
    Core::Manager::Resource->Load<coreTexture>("environment_pillar_01_norm.png",         CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_pillar_01_norm.png", CORE_TEXTURE_LOAD_NO_COMPRESS);
    Core::Manager::Resource->Load<coreTexture>("environment_pillar_02_diff.png",         CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_pillar_02_diff.png");
    Core::Manager::Resource->Load<coreTexture>("environment_pillar_02_norm.png",         CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_pillar_02_norm.png", CORE_TEXTURE_LOAD_NO_COMPRESS);
    Core::Manager::Resource->Load<coreTexture>("environment_plant.png",                  CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_plant.png", CORE_TEXTURE_LOAD_NEAREST);
    Core::Manager::Resource->Load<coreTexture>("environment_pyramid_diff.png",           CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_pyramid_diff.png");
    Core::Manager::Resource->Load<coreTexture>("environment_pyramid_norm.png",           CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_pyramid_norm.png", CORE_TEXTURE_LOAD_NO_COMPRESS);
    Core::Manager::Resource->Load<coreTexture>("environment_rock_diff.png",              CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_rock_diff.png");
    Core::Manager::Resource->Load<coreTexture>("environment_rock_norm.png",              CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_rock_norm.png", CORE_TEXTURE_LOAD_NO_COMPRESS);
    Core::Manager::Resource->Load<coreTexture>("environment_sea.png",                    CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_sea.png", CORE_TEXTURE_LOAD_NO_COMPRESS);   // # visual artifacts
    Core::Manager::Resource->Load<coreTexture>("environment_snow_diff.png",              CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_snow_diff.png");
    Core::Manager::Resource->Load<coreTexture>("environment_snow_norm.png",              CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_snow_norm.png", CORE_TEXTURE_LOAD_NO_COMPRESS);
    Core::Manager::Resource->Load<coreTexture>("environment_space_inside.png",           CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_space_inside.png");
    Core::Manager::Resource->Load<coreTexture>("environment_space_outside.png",          CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_space_outside.png");
    Core::Manager::Resource->Load<coreTexture>("environment_stone_diff.png",             CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_stone_diff.png");
    Core::Manager::Resource->Load<coreTexture>("environment_stone_norm.png",             CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_stone_norm.png", CORE_TEXTURE_LOAD_NO_COMPRESS);
    Core::Manager::Resource->Load<coreTexture>("environment_tree_01_diff.png",           CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_tree_01_diff.png");
    Core::Manager::Resource->Load<coreTexture>("environment_tree_01_norm.png",           CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_tree_01_norm.png", CORE_TEXTURE_LOAD_NO_COMPRESS);
    Core::Manager::Resource->Load<coreTexture>("environment_tree_02_diff.png",           CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_tree_02_diff.png");
    Core::Manager::Resource->Load<coreTexture>("environment_tree_02_norm.png",           CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_tree_02_norm.png", CORE_TEXTURE_LOAD_NO_COMPRESS);
    Core::Manager::Resource->Load<coreTexture>("environment_tree_03_diff.png",           CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_tree_03_diff.png");
    Core::Manager::Resource->Load<coreTexture>("environment_tree_03_norm.png",           CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_tree_03_norm.png", CORE_TEXTURE_LOAD_NO_COMPRESS);
    Core::Manager::Resource->Load<coreTexture>("environment_water_norm.png",             CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_water_norm.png", CORE_TEXTURE_LOAD_NO_COMPRESS);
    Core::Manager::Resource->Load<coreTexture>("environment_water_rain.png",             CORE_RESOURCE_UPDATE_AUTO,   "data/textures/environment_water_rain.png", CORE_TEXTURE_LOAD_NO_COMPRESS);
    Core::Manager::Resource->Load<coreTexture>("fallback_depth.png",                     CORE_RESOURCE_UPDATE_AUTO,   "data/textures/fallback_depth.png", CORE_TEXTURE_LOAD_NO_COMPRESS | CORE_TEXTURE_LOAD_NO_FILTER | CORE_TEXTURE_LOAD_NEAREST);
    Core::Manager::Resource->Load<coreTexture>("menu_fragment_01.png",                   CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_fragment_01.png");
    Core::Manager::Resource->Load<coreTexture>("menu_fragment_02.png",                   CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_fragment_02.png");
    Core::Manager::Resource->Load<coreTexture>("menu_fragment_03.png",                   CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_fragment_03.png");
    Core::Manager::Resource->Load<coreTexture>("menu_fragment_04.png",                   CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_fragment_04.png");
    Core::Manager::Resource->Load<coreTexture>("menu_fragment_05.png",                   CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_fragment_05.png");
    Core::Manager::Resource->Load<coreTexture>("menu_fragment_06.png",                   CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_fragment_06.png");
    Core::Manager::Resource->Load<coreTexture>("menu_fragment_07.png",                   CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_fragment_07.png");
    Core::Manager::Resource->Load<coreTexture>("menu_fragment_08.png",                   CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_fragment_08.png");
    Core::Manager::Resource->Load<coreTexture>("menu_fragment_09.png",                   CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_fragment_09.png");
    Core::Manager::Resource->Load<coreTexture>("menu_fragment_plate.png",                CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_fragment_plate.png");
    Core::Manager::Resource->Load<coreTexture>("game_logo.png",                          CORE_RESOURCE_UPDATE_AUTO,   "data/textures/game_logo.png", CORE_TEXTURE_LOAD_NO_COMPRESS);   // # visual artifacts
    Core::Manager::Resource->Load<coreTexture>("game_logo_demo.png",                     CORE_RESOURCE_UPDATE_AUTO,   "data/textures/game_logo_demo.png", CORE_TEXTURE_LOAD_NO_COMPRESS);   // # visual artifacts
    Core::Manager::Resource->Load<coreTexture>("game_logo_kana.png",                     CORE_RESOURCE_UPDATE_AUTO,   "data/textures/game_logo_kana.png", CORE_TEXTURE_LOAD_NO_COMPRESS);   // # visual artifacts
    Core::Manager::Resource->Load<coreTexture>("input_gamepad_luna.png",                 CORE_RESOURCE_UPDATE_AUTO,   "data/textures/input_gamepad_luna.png", CORE_TEXTURE_LOAD_NO_COMPRESS);   // # visual artifacts
    Core::Manager::Resource->Load<coreTexture>("input_gamepad_ps3.png",                  CORE_RESOURCE_UPDATE_AUTO,   "data/textures/input_gamepad_ps3.png", CORE_TEXTURE_LOAD_NO_COMPRESS);   // # visual artifacts
    Core::Manager::Resource->Load<coreTexture>("input_gamepad_ps4.png",                  CORE_RESOURCE_UPDATE_AUTO,   "data/textures/input_gamepad_ps4.png", CORE_TEXTURE_LOAD_NO_COMPRESS);   // # visual artifacts
    Core::Manager::Resource->Load<coreTexture>("input_gamepad_ps5.png",                  CORE_RESOURCE_UPDATE_AUTO,   "data/textures/input_gamepad_ps5.png", CORE_TEXTURE_LOAD_NO_COMPRESS);   // # visual artifacts
    Core::Manager::Resource->Load<coreTexture>("input_gamepad_stadia.png",               CORE_RESOURCE_UPDATE_AUTO,   "data/textures/input_gamepad_stadia.png", CORE_TEXTURE_LOAD_NO_COMPRESS);   // # visual artifacts
    Core::Manager::Resource->Load<coreTexture>("input_gamepad_steamdeck.png",            CORE_RESOURCE_UPDATE_AUTO,   "data/textures/input_gamepad_steamdeck.png", CORE_TEXTURE_LOAD_NO_COMPRESS);   // # visual artifacts
    Core::Manager::Resource->Load<coreTexture>("input_gamepad_switch.png",               CORE_RESOURCE_UPDATE_AUTO,   "data/textures/input_gamepad_switch.png", CORE_TEXTURE_LOAD_NO_COMPRESS);   // # visual artifacts
    Core::Manager::Resource->Load<coreTexture>("input_gamepad_switch_full.png",          CORE_RESOURCE_UPDATE_AUTO,   "data/textures/input_gamepad_switch_full.png", CORE_TEXTURE_LOAD_NO_COMPRESS);   // # visual artifacts
    Core::Manager::Resource->Load<coreTexture>("input_gamepad_switch_left.png",          CORE_RESOURCE_UPDATE_AUTO,   "data/textures/input_gamepad_switch_left.png", CORE_TEXTURE_LOAD_NO_COMPRESS);   // # visual artifacts
    Core::Manager::Resource->Load<coreTexture>("input_gamepad_switch_right.png",         CORE_RESOURCE_UPDATE_AUTO,   "data/textures/input_gamepad_switch_right.png", CORE_TEXTURE_LOAD_NO_COMPRESS);   // # visual artifacts
    Core::Manager::Resource->Load<coreTexture>("input_gamepad_xbox360.png",              CORE_RESOURCE_UPDATE_AUTO,   "data/textures/input_gamepad_xbox360.png", CORE_TEXTURE_LOAD_NO_COMPRESS);   // # visual artifacts
    Core::Manager::Resource->Load<coreTexture>("input_gamepad_xboxone.png",              CORE_RESOURCE_UPDATE_AUTO,   "data/textures/input_gamepad_xboxone.png", CORE_TEXTURE_LOAD_NO_COMPRESS);   // # visual artifacts
    Core::Manager::Resource->Load<coreTexture>("input_keyboard.png",                     CORE_RESOURCE_UPDATE_AUTO,   "data/textures/input_keyboard.png", CORE_TEXTURE_LOAD_NO_COMPRESS);   // # visual artifacts
    Core::Manager::Resource->Load<coreTexture>("maus_logo.png",                          CORE_RESOURCE_UPDATE_AUTO,   "data/textures/maus_logo.png");
    Core::Manager::Resource->Load<coreTexture>("menu_arrow.png",                         CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_arrow.png");
    Core::Manager::Resource->Load<coreTexture>("menu_background_black.png",              CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_background_black.png");
    Core::Manager::Resource->Load<coreTexture>("menu_badge.png",                         CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_badge.png", CORE_TEXTURE_LOAD_NO_COMPRESS);   // # visual artifacts
    Core::Manager::Resource->Load<coreTexture>("menu_cursor.png",                        CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_cursor.png");
    Core::Manager::Resource->Load<coreTexture>("menu_detail_01.png",                     CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_detail_01.png");
    Core::Manager::Resource->Load<coreTexture>("menu_detail_02.png",                     CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_detail_02.png");
    Core::Manager::Resource->Load<coreTexture>("menu_detail_03.png",                     CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_detail_03.png");
    Core::Manager::Resource->Load<coreTexture>("menu_detail_04.png",                     CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_detail_04.png");
    Core::Manager::Resource->Load<coreTexture>("menu_detail_05.png",                     CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_detail_05.png");
    Core::Manager::Resource->Load<coreTexture>("menu_helper.png",                        CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_helper.png");
    Core::Manager::Resource->Load<coreTexture>("menu_medal.png",                         CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_medal.png", CORE_TEXTURE_LOAD_NO_COMPRESS);   // # visual artifacts
    Core::Manager::Resource->Load<coreTexture>("menu_segment_boss.png",                  CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_segment_boss.png", CORE_TEXTURE_LOAD_NO_COMPRESS);   // # visual artifacts
    Core::Manager::Resource->Load<coreTexture>("menu_segment_wave.png",                  CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_segment_wave.png", CORE_TEXTURE_LOAD_NO_COMPRESS);   // # visual artifacts
    Core::Manager::Resource->Load<coreTexture>("menu_trophy.png",                        CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_trophy.png");
    Core::Manager::Resource->Load<coreTexture>("menu_unlock.png",                        CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_unlock.png");
    Core::Manager::Resource->Load<coreTexture>("menu_weapon.png",                        CORE_RESOURCE_UPDATE_AUTO,   "data/textures/menu_weapon.png");
    Core::Manager::Resource->Load<coreTexture>("ship_enemy.png",                         CORE_RESOURCE_UPDATE_AUTO,   "data/textures/ship_enemy.png", CORE_TEXTURE_LOAD_NEAREST);
    Core::Manager::Resource->Load<coreTexture>("ship_player.png",                        CORE_RESOURCE_UPDATE_AUTO,   "data/textures/ship_player.png", CORE_TEXTURE_LOAD_NEAREST);

    Core::Manager::Resource->Load<coreShader> ("effect_decal.vert",                      CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_decal.vert");
    Core::Manager::Resource->Load<coreShader> ("effect_decal.frag",                      CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_decal.frag");
    Core::Manager::Resource->Load<coreShader> ("effect_decal_single.frag",               CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_decal.frag", SHADER_SINGLE);
    Core::Manager::Resource->Load<coreShader> ("effect_decal_light.frag",                CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_decal.frag", SHADER_LIGHT);
    Core::Manager::Resource->Load<coreShader> ("effect_decal_inst.vert",                 CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_decal.vert", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("effect_decal_inst.frag",                 CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_decal.frag", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("effect_decal_single_inst.frag",          CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_decal.frag", CORE_SHADER_OPTION_INSTANCING SHADER_SINGLE);
    Core::Manager::Resource->Load<coreShader> ("effect_decal_light_inst.frag",           CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_decal.frag", CORE_SHADER_OPTION_INSTANCING SHADER_LIGHT);
    Core::Manager::Resource->Load<coreShader> ("effect_distortion.vert",                 CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_distortion.vert", CORE_SHADER_OPTION_NO_ROTATION);
    Core::Manager::Resource->Load<coreShader> ("effect_distortion.frag",                 CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_distortion.frag");
    Core::Manager::Resource->Load<coreShader> ("effect_distortion_direct.frag",          CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_distortion.frag", SHADER_DIRECT);
    Core::Manager::Resource->Load<coreShader> ("effect_distortion_object3d.vert",        CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_distortion.vert", CORE_SHADER_OPTION_NO_ROTATION SHADER_OBJECT3D);
    Core::Manager::Resource->Load<coreShader> ("effect_distortion_object3d_inst.vert",   CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_distortion.vert", CORE_SHADER_OPTION_INSTANCING CORE_SHADER_OPTION_NO_ROTATION SHADER_OBJECT3D);
    Core::Manager::Resource->Load<coreShader> ("effect_distortion_object3d_inst.frag",   CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_distortion.frag", CORE_SHADER_OPTION_INSTANCING SHADER_OBJECT3D);
    Core::Manager::Resource->Load<coreShader> ("effect_energy.vert",                     CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert");
    Core::Manager::Resource->Load<coreShader> ("effect_energy_spheric.vert",             CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", SHADER_SPHERIC);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_invert.vert",              CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", SHADER_INVERT);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_direct.vert",              CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", SHADER_DIRECT);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_flat.vert",                CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", SHADER_FLAT);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_flat_spheric.vert",        CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", SHADER_FLAT SHADER_SPHERIC);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_flat_invert.vert",         CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", SHADER_FLAT SHADER_INVERT);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_flat_direct.vert",         CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", SHADER_FLAT SHADER_DIRECT);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_bullet.vert",              CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", SHADER_FLAT SHADER_BULLET);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_bullet_spheric.vert",      CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", SHADER_FLAT SHADER_BULLET SHADER_SPHERIC);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_bullet_invert.vert",       CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", SHADER_FLAT SHADER_BULLET SHADER_INVERT);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_bullet_direct.vert",       CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", SHADER_FLAT SHADER_BULLET SHADER_DIRECT);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_rotated.vert",             CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", SHADER_ROTATED);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_rotated_spheric.vert",     CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", SHADER_ROTATED SHADER_SPHERIC);
    Core::Manager::Resource->Load<coreShader> ("effect_energy.frag",                     CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.frag");
    Core::Manager::Resource->Load<coreShader> ("effect_energy_blink.frag",               CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.frag", SHADER_BLINK);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_inst.vert",                CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_invert_inst.vert",         CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", CORE_SHADER_OPTION_INSTANCING SHADER_INVERT);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_direct_inst.vert",         CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", CORE_SHADER_OPTION_INSTANCING SHADER_DIRECT);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_flat_inst.vert",           CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", CORE_SHADER_OPTION_INSTANCING SHADER_FLAT);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_flat_spheric_inst.vert",   CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", CORE_SHADER_OPTION_INSTANCING SHADER_FLAT SHADER_SPHERIC);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_flat_invert_inst.vert",    CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", CORE_SHADER_OPTION_INSTANCING SHADER_FLAT SHADER_INVERT);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_flat_direct_inst.vert",    CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", CORE_SHADER_OPTION_INSTANCING SHADER_FLAT SHADER_DIRECT);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_bullet_inst.vert",         CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", CORE_SHADER_OPTION_INSTANCING SHADER_FLAT SHADER_BULLET);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_bullet_spheric_inst.vert", CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", CORE_SHADER_OPTION_INSTANCING SHADER_FLAT SHADER_BULLET SHADER_SPHERIC);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_bullet_invert_inst.vert",  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", CORE_SHADER_OPTION_INSTANCING SHADER_FLAT SHADER_BULLET SHADER_INVERT);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_bullet_direct_inst.vert",  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.vert", CORE_SHADER_OPTION_INSTANCING SHADER_FLAT SHADER_BULLET SHADER_DIRECT);
    Core::Manager::Resource->Load<coreShader> ("effect_energy_inst.frag",                CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_energy.frag", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("effect_explosion.vert",                  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_explosion.vert", CORE_SHADER_OPTION_NO_ROTATION);
    Core::Manager::Resource->Load<coreShader> ("effect_explosion.frag",                  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_explosion.frag");
    Core::Manager::Resource->Load<coreShader> ("effect_frame.vert",                      CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_frame.vert", CORE_SHADER_OPTION_NO_ROTATION);
    Core::Manager::Resource->Load<coreShader> ("effect_frame.frag",                      CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_frame.frag");
    Core::Manager::Resource->Load<coreShader> ("effect_gust.vert",                       CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_gust.vert");
    Core::Manager::Resource->Load<coreShader> ("effect_gust.frag",                       CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_gust.frag");
    Core::Manager::Resource->Load<coreShader> ("effect_gust_inst.vert",                  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_gust.vert", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("effect_gust_inst.frag",                  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_gust.frag", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("effect_headlight.vert",                  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_headlight.vert", CORE_SHADER_OPTION_NO_ROTATION);
    Core::Manager::Resource->Load<coreShader> ("effect_headlight.frag",                  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_headlight.frag");
    Core::Manager::Resource->Load<coreShader> ("effect_lightning.vert",                  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_lightning.vert");
    Core::Manager::Resource->Load<coreShader> ("effect_lightning.frag",                  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_lightning.frag");
    Core::Manager::Resource->Load<coreShader> ("effect_lightning_inst.vert",             CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_lightning.vert", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("effect_lightning_inst.frag",             CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_lightning.frag", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("effect_outline.vert",                    CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.vert");
    Core::Manager::Resource->Load<coreShader> ("effect_outline_thick.vert",              CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.vert", SHADER_THICK);
    Core::Manager::Resource->Load<coreShader> ("effect_outline_flat.vert",               CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.vert", SHADER_FLAT);
    Core::Manager::Resource->Load<coreShader> ("effect_outline_flat_thick.vert",         CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.vert", SHADER_FLAT SHADER_THICK);
    Core::Manager::Resource->Load<coreShader> ("effect_outline_bullet.vert",             CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.vert", SHADER_FLAT SHADER_BULLET);
    Core::Manager::Resource->Load<coreShader> ("effect_outline_bullet_thick.vert",       CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.vert", SHADER_FLAT SHADER_BULLET SHADER_THICK);
    Core::Manager::Resource->Load<coreShader> ("effect_outline.frag",                    CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.frag");
    Core::Manager::Resource->Load<coreShader> ("effect_outline_light.frag",              CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.frag", SHADER_LIGHT);
    Core::Manager::Resource->Load<coreShader> ("effect_outline_direct.vert",             CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.vert", SHADER_DIRECT);
    Core::Manager::Resource->Load<coreShader> ("effect_outline_flat_direct.vert",        CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.vert", SHADER_FLAT SHADER_DIRECT);
    Core::Manager::Resource->Load<coreShader> ("effect_outline_bullet_direct.vert",      CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.vert", SHADER_FLAT SHADER_BULLET SHADER_DIRECT);
    Core::Manager::Resource->Load<coreShader> ("effect_outline_direct.frag",             CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.frag", SHADER_DIRECT);
    Core::Manager::Resource->Load<coreShader> ("effect_outline_inst.vert",               CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.vert", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("effect_outline_thick_inst.vert",         CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.vert", CORE_SHADER_OPTION_INSTANCING SHADER_THICK);
    Core::Manager::Resource->Load<coreShader> ("effect_outline_flat_inst.vert",          CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.vert", CORE_SHADER_OPTION_INSTANCING SHADER_FLAT);
    Core::Manager::Resource->Load<coreShader> ("effect_outline_flat_thick_inst.vert",    CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.vert", CORE_SHADER_OPTION_INSTANCING SHADER_FLAT SHADER_THICK);
    Core::Manager::Resource->Load<coreShader> ("effect_outline_bullet_inst.vert",        CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.vert", CORE_SHADER_OPTION_INSTANCING SHADER_FLAT SHADER_BULLET);
    Core::Manager::Resource->Load<coreShader> ("effect_outline_bullet_thick_inst.vert",  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.vert", CORE_SHADER_OPTION_INSTANCING SHADER_FLAT SHADER_BULLET SHADER_THICK);
    Core::Manager::Resource->Load<coreShader> ("effect_outline_inst.frag",               CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.frag", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("effect_outline_light_inst.frag",         CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.frag", CORE_SHADER_OPTION_INSTANCING SHADER_LIGHT);
    Core::Manager::Resource->Load<coreShader> ("effect_outline_direct_inst.vert",        CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.vert", CORE_SHADER_OPTION_INSTANCING SHADER_DIRECT);
    Core::Manager::Resource->Load<coreShader> ("effect_outline_flat_direct_inst.vert",   CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.vert", CORE_SHADER_OPTION_INSTANCING SHADER_FLAT SHADER_DIRECT);
    Core::Manager::Resource->Load<coreShader> ("effect_outline_bullet_direct_inst.vert", CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.vert", CORE_SHADER_OPTION_INSTANCING SHADER_FLAT SHADER_BULLET SHADER_DIRECT);
    Core::Manager::Resource->Load<coreShader> ("effect_outline_direct_inst.frag",        CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_outline.frag", CORE_SHADER_OPTION_INSTANCING SHADER_DIRECT);
    Core::Manager::Resource->Load<coreShader> ("effect_particle.vert",                   CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_particle.vert", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("effect_particle_color.frag",             CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_particle_color.frag", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("effect_particle_dark.frag",              CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_particle_dark.frag", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("effect_particle_fire.frag",              CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_particle_fire.frag", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("effect_particle_smoke.frag",             CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_particle_smoke.frag", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("effect_shadow.vert",                     CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_shadow.vert");
    Core::Manager::Resource->Load<coreShader> ("effect_shadow.frag",                     CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_shadow.frag");
    Core::Manager::Resource->Load<coreShader> ("effect_shadow_inst.vert",                CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_shadow.vert", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("effect_shield.vert",                     CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_shield.vert");
    Core::Manager::Resource->Load<coreShader> ("effect_shield.frag",                     CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_shield.frag");
    Core::Manager::Resource->Load<coreShader> ("effect_snow.vert",                       CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_snow.vert", CORE_SHADER_OPTION_NO_ROTATION);
    Core::Manager::Resource->Load<coreShader> ("effect_snow.frag",                       CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_snow.frag");
    Core::Manager::Resource->Load<coreShader> ("effect_track.vert",                      CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_track.vert");
    Core::Manager::Resource->Load<coreShader> ("effect_track.frag",                      CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_track.frag");
    Core::Manager::Resource->Load<coreShader> ("effect_weather_nebula.vert",             CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_weather.vert", PRINT(SHADER_OVERLAYS(%u) SHADER_SINGLE, SPACE_NEBULA_NUM));
    Core::Manager::Resource->Load<coreShader> ("effect_weather_nebula.frag",             CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_weather.frag", PRINT(SHADER_OVERLAYS(%u) SHADER_SINGLE, SPACE_NEBULA_NUM));
    Core::Manager::Resource->Load<coreShader> ("effect_weather_rain_cloud.vert",         CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_weather.vert", PRINT(SHADER_OVERLAYS(%u) SHADER_SINGLE, CLOUD_RAIN_NUM));
    Core::Manager::Resource->Load<coreShader> ("effect_weather_rain_cloud.frag",         CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_weather.frag", PRINT(SHADER_OVERLAYS(%u) SHADER_SINGLE, CLOUD_RAIN_NUM));
    Core::Manager::Resource->Load<coreShader> ("effect_weather_rain_moss.vert",          CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_weather.vert", PRINT(SHADER_OVERLAYS(%u) SHADER_SINGLE, MOSS_RAIN_NUM));
    Core::Manager::Resource->Load<coreShader> ("effect_weather_rain_moss.frag",          CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_weather.frag", PRINT(SHADER_OVERLAYS(%u) SHADER_SINGLE, MOSS_RAIN_NUM));
    Core::Manager::Resource->Load<coreShader> ("effect_weather_sand.vert",               CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_weather.vert", PRINT(SHADER_OVERLAYS(%u) SHADER_SINGLE, DESERT_SAND_NUM));
    Core::Manager::Resource->Load<coreShader> ("effect_weather_sand.frag",               CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_weather.frag", PRINT(SHADER_OVERLAYS(%u) SHADER_SINGLE, DESERT_SAND_NUM));
    Core::Manager::Resource->Load<coreShader> ("effect_weather_snow.vert",               CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_weather.vert", PRINT(SHADER_OVERLAYS(%u) SHADER_SINGLE, CORE_GL_SUPPORT(ES2_restriction) ? SNOW_SNOW_NUM_LOW : SNOW_SNOW_NUM));
    Core::Manager::Resource->Load<coreShader> ("effect_weather_snow.frag",               CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/effect_weather.frag", PRINT(SHADER_OVERLAYS(%u) SHADER_SINGLE, CORE_GL_SUPPORT(ES2_restriction) ? SNOW_SNOW_NUM_LOW : SNOW_SNOW_NUM));
    Core::Manager::Resource->Load<coreShader> ("environment_clouds.vert",                CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/environment_clouds.vert");
    Core::Manager::Resource->Load<coreShader> ("environment_clouds.frag",                CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/environment_clouds.frag");
    Core::Manager::Resource->Load<coreShader> ("environment_clouds_inst.vert",           CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/environment_clouds.vert", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("environment_clouds_inst.frag",           CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/environment_clouds.frag", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("environment_ice.vert",                   CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/environment_ice.vert", CORE_SHADER_OPTION_NO_ROTATION);
    Core::Manager::Resource->Load<coreShader> ("environment_ice.frag",                   CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/environment_ice.frag", CORE_SHADER_OPTION_NO_EARLY_DEPTH);
    Core::Manager::Resource->Load<coreShader> ("environment_lava.vert",                  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/environment_lava.vert", CORE_SHADER_OPTION_NO_ROTATION);
    Core::Manager::Resource->Load<coreShader> ("environment_lava.frag",                  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/environment_lava.frag");
    Core::Manager::Resource->Load<coreShader> ("environment_outdoor.vert",               CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/environment_outdoor.vert", CORE_SHADER_OPTION_NO_ROTATION);
    Core::Manager::Resource->Load<coreShader> ("environment_outdoor.frag",               CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/environment_outdoor.frag");
    Core::Manager::Resource->Load<coreShader> ("environment_outdoor_glow.frag",          CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/environment_outdoor.frag", SHADER_GLOW);
    Core::Manager::Resource->Load<coreShader> ("environment_outdoor_light.frag",         CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/environment_outdoor.frag", SHADER_LIGHT);
    Core::Manager::Resource->Load<coreShader> ("environment_outdoor_light_glow.frag",    CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/environment_outdoor.frag", SHADER_LIGHT SHADER_GLOW);
    Core::Manager::Resource->Load<coreShader> ("environment_rain.vert",                  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/environment_rain.vert", CORE_SHADER_OPTION_NO_ROTATION);
    Core::Manager::Resource->Load<coreShader> ("environment_rain.frag",                  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/environment_rain.frag");
    Core::Manager::Resource->Load<coreShader> ("environment_under.vert",                 CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/environment_under.vert", CORE_SHADER_OPTION_NO_ROTATION);
    Core::Manager::Resource->Load<coreShader> ("environment_under.frag",                 CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/environment_under.frag");
    Core::Manager::Resource->Load<coreShader> ("environment_vignette.frag",              CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/environment_vignette.frag");
    Core::Manager::Resource->Load<coreShader> ("environment_vignette_grey.frag",         CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/environment_vignette.frag", SHADER_GREY);
    Core::Manager::Resource->Load<coreShader> ("environment_water.vert",                 CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/environment_water.vert", CORE_SHADER_OPTION_NO_ROTATION);
    Core::Manager::Resource->Load<coreShader> ("environment_water.frag",                 CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/environment_water.frag");
    Core::Manager::Resource->Load<coreShader> ("full.vert",                              CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/full.vert");
    Core::Manager::Resource->Load<coreShader> ("full_blur_1x.frag",                      CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/full_blur_1x.frag");
    Core::Manager::Resource->Load<coreShader> ("full_blur_2y.frag",                      CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/full_blur_2y.frag");
    Core::Manager::Resource->Load<coreShader> ("full_post.frag",                         CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/full_post.frag", SHADER_GLOW);
    Core::Manager::Resource->Load<coreShader> ("full_post_distorted.frag",               CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/full_post.frag", SHADER_GLOW SHADER_DISTORTION);
    Core::Manager::Resource->Load<coreShader> ("full_post_transparent.frag",             CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/full_post.frag", SHADER_GLOW SHADER_TRANSPARENT);
    Core::Manager::Resource->Load<coreShader> ("full_post_chroma.frag",                  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/full_post.frag", SHADER_GLOW SHADER_DISTORTION SHADER_CHROMA);
    Core::Manager::Resource->Load<coreShader> ("full_post_debug.frag",                   CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/full_post.frag", SHADER_GLOW SHADER_DISTORTION SHADER_DEBUG);
    Core::Manager::Resource->Load<coreShader> ("full_transition_fade.frag",              CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/full_transition.frag", SHADER_TRANSITION(0));
    Core::Manager::Resource->Load<coreShader> ("full_transition_wipe.frag",              CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/full_transition.frag", SHADER_TRANSITION(1));
    Core::Manager::Resource->Load<coreShader> ("full_transition_curtain.frag",           CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/full_transition.frag", SHADER_TRANSITION(2));
    Core::Manager::Resource->Load<coreShader> ("full_transition_circle.frag",            CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/full_transition.frag", SHADER_TRANSITION(3));
    Core::Manager::Resource->Load<coreShader> ("menu_animate.vert",                      CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/menu_animate.vert");
    Core::Manager::Resource->Load<coreShader> ("menu_animate.frag",                      CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/menu_animate.frag");
    Core::Manager::Resource->Load<coreShader> ("menu_border.vert",                       CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/menu_border.vert");
    Core::Manager::Resource->Load<coreShader> ("menu_border.frag",                       CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/menu_border.frag");
    Core::Manager::Resource->Load<coreShader> ("menu_border_direct.frag",                CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/menu_border.frag", SHADER_DIRECT);
    Core::Manager::Resource->Load<coreShader> ("menu_color.frag",                        CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/menu_color.frag");
    Core::Manager::Resource->Load<coreShader> ("menu_fragment.vert",                     CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/menu_fragment.vert");
    Core::Manager::Resource->Load<coreShader> ("menu_fragment.frag",                     CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/menu_fragment.frag");
    Core::Manager::Resource->Load<coreShader> ("menu_free.vert",                         CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/menu_free.vert", CORE_SHADER_OPTION_NO_ROTATION);
    Core::Manager::Resource->Load<coreShader> ("menu_free.frag",                         CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/menu_free.frag");
    Core::Manager::Resource->Load<coreShader> ("menu_grey.frag",                         CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/menu_grey.frag");
    Core::Manager::Resource->Load<coreShader> ("menu_grey_vignette.frag",                CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/menu_grey.frag", SHADER_VIGNETTE);
    Core::Manager::Resource->Load<coreShader> ("menu_helper.vert",                       CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/menu_helper.vert");
    Core::Manager::Resource->Load<coreShader> ("menu_helper.frag",                       CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/menu_helper.frag");
    Core::Manager::Resource->Load<coreShader> ("menu_inner.vert",                        CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/menu_inner.vert", CORE_SHADER_OPTION_NO_ROTATION);
    Core::Manager::Resource->Load<coreShader> ("menu_inner.frag",                        CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/menu_inner.frag");
    Core::Manager::Resource->Load<coreShader> ("menu_segment.vert",                      CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/menu_segment.vert", CORE_SHADER_OPTION_NO_ROTATION);
    Core::Manager::Resource->Load<coreShader> ("menu_segment.frag",                      CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/menu_segment.frag");
    Core::Manager::Resource->Load<coreShader> ("menu_single.frag",                       CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/menu_single.frag");
    Core::Manager::Resource->Load<coreShader> ("menu_swipe.vert",                        CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/menu_swipe.vert", CORE_SHADER_OPTION_NO_ROTATION);
    Core::Manager::Resource->Load<coreShader> ("menu_swipe.frag",                        CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/menu_swipe.frag");
    Core::Manager::Resource->Load<coreShader> ("menu_swipe_label.frag",                  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/menu_swipe.frag", SHADER_LABEL);
    Core::Manager::Resource->Load<coreShader> ("object.vert",                            CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object.vert");
    Core::Manager::Resource->Load<coreShader> ("object_wave.vert",                       CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object.vert", SHADER_WAVE);
    Core::Manager::Resource->Load<coreShader> ("object_ground.frag",                     CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_ground.frag");
    Core::Manager::Resource->Load<coreShader> ("object_ship.frag",                       CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_ship.frag");
    Core::Manager::Resource->Load<coreShader> ("object_ship_glow.frag",                  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_ship.frag", SHADER_GLOW);
    Core::Manager::Resource->Load<coreShader> ("object_ship_depth.frag",                 CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_ship.frag", SHADER_GLOW SHADER_DEPTH);
    Core::Manager::Resource->Load<coreShader> ("object_ship_detail.frag",                CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_ship.frag", SHADER_GLOW SHADER_DEPTH SHADER_DETAIL);
    Core::Manager::Resource->Load<coreShader> ("object_ship_blink.frag",                 CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_ship.frag", SHADER_BLINK);
    Core::Manager::Resource->Load<coreShader> ("object_ship_darkness.frag",              CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_ship.frag", SHADER_DARKNESS);
    Core::Manager::Resource->Load<coreShader> ("object_ice.frag",                        CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_ice.frag");
    Core::Manager::Resource->Load<coreShader> ("object_meteor.frag",                     CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_meteor.frag");
    Core::Manager::Resource->Load<coreShader> ("object_meteor_blink.frag",               CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_meteor.frag", SHADER_BLINK);
    Core::Manager::Resource->Load<coreShader> ("object_inst.vert",                       CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object.vert", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("object_wave_inst.vert",                  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object.vert", CORE_SHADER_OPTION_INSTANCING SHADER_WAVE);
    Core::Manager::Resource->Load<coreShader> ("object_ground_inst.frag",                CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_ground.frag", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("object_ship_glow_inst.frag",             CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_ship.frag", CORE_SHADER_OPTION_INSTANCING SHADER_GLOW);
    Core::Manager::Resource->Load<coreShader> ("object_ship_depth_inst.frag",            CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_ship.frag", CORE_SHADER_OPTION_INSTANCING SHADER_GLOW SHADER_DEPTH);
    Core::Manager::Resource->Load<coreShader> ("object_ship_detail_inst.frag",           CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_ship.frag", CORE_SHADER_OPTION_INSTANCING SHADER_GLOW SHADER_DEPTH SHADER_DETAIL);
    Core::Manager::Resource->Load<coreShader> ("object_ship_blink_inst.frag",            CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_ship.frag", CORE_SHADER_OPTION_INSTANCING SHADER_BLINK);
    Core::Manager::Resource->Load<coreShader> ("object_meteor_inst.frag",                CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_meteor.frag", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("object_meteor_blink_inst.frag",          CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_meteor.frag", CORE_SHADER_OPTION_INSTANCING SHADER_BLINK);
    Core::Manager::Resource->Load<coreShader> ("object_board.vert",                      CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_board.vert");
    Core::Manager::Resource->Load<coreShader> ("object_board.frag",                      CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_board.frag");
    Core::Manager::Resource->Load<coreShader> ("object_board_inst.vert",                 CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_board.vert", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("object_board_inst.frag",                 CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_board.frag", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("object_plate.vert",                      CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_plate.vert");
    Core::Manager::Resource->Load<coreShader> ("object_plate.frag",                      CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_plate.frag");
    Core::Manager::Resource->Load<coreShader> ("object_plate_inst.vert",                 CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_plate.vert", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("object_plate_inst.frag",                 CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_plate.frag", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("object_tile.vert",                       CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_tile.vert");
    Core::Manager::Resource->Load<coreShader> ("object_tile.frag",                       CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_tile.frag");
    Core::Manager::Resource->Load<coreShader> ("object_tile_inst.vert",                  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_tile.vert", CORE_SHADER_OPTION_INSTANCING);
    Core::Manager::Resource->Load<coreShader> ("object_tile_inst.frag",                  CORE_RESOURCE_UPDATE_MANUAL, "data/shaders/object_tile.frag", CORE_SHADER_OPTION_INSTANCING);

    Core::Manager::Resource->Load<coreSound>  ("badge.wav",                              CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/badge.wav");
    Core::Manager::Resource->Load<coreSound>  ("bullet_hit.wav",                         CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/bullet_hit.wav");
    Core::Manager::Resource->Load<coreSound>  ("bullet_reflect.wav",                     CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/bullet_reflect.wav");
    Core::Manager::Resource->Load<coreSound>  ("bullet_vanish.wav",                      CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/bullet_vanish.wav");
    Core::Manager::Resource->Load<coreSound>  ("continue_tick.wav",                      CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/continue_tick.wav");
    Core::Manager::Resource->Load<coreSound>  ("continue_accept.wav",                    CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/continue_accept.wav");
    Core::Manager::Resource->Load<coreSound>  ("effect_alert.wav",                       CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/effect_alert.wav");
    Core::Manager::Resource->Load<coreSound>  ("effect_beep.wav",                        CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/effect_beep.wav");
    Core::Manager::Resource->Load<coreSound>  ("effect_bell.wav",                        CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/effect_bell.wav");
    Core::Manager::Resource->Load<coreSound>  ("effect_click.wav",                       CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/effect_click.wav");
    Core::Manager::Resource->Load<coreSound>  ("effect_dust.wav",                        CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/effect_dust.wav");
    Core::Manager::Resource->Load<coreSound>  ("effect_error.wav",                       CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/effect_error.wav");
    Core::Manager::Resource->Load<coreSound>  ("effect_fire.wav",                        CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/effect_fire.wav");
    Core::Manager::Resource->Load<coreSound>  ("effect_flicker.wav",                     CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/effect_flicker.wav");
    Core::Manager::Resource->Load<coreSound>  ("effect_fly.wav",                         CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/effect_fly.wav");
    Core::Manager::Resource->Load<coreSound>  ("effect_heart.wav",                       CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/effect_heart.wav");
    Core::Manager::Resource->Load<coreSound>  ("effect_laser.wav",                       CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/effect_laser.wav");
    Core::Manager::Resource->Load<coreSound>  ("effect_nightmare.wav",                   CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/effect_nightmare.wav");
    Core::Manager::Resource->Load<coreSound>  ("effect_pearl.wav",                       CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/effect_pearl.wav");
    Core::Manager::Resource->Load<coreSound>  ("effect_rumble.wav",                      CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/effect_rumble.wav");
    Core::Manager::Resource->Load<coreSound>  ("effect_shake_01.wav",                    CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/effect_shake_01.wav");
    Core::Manager::Resource->Load<coreSound>  ("effect_shake_02.wav",                    CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/effect_shake_02.wav");
    Core::Manager::Resource->Load<coreSound>  ("effect_success.wav",                     CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/effect_success.wav");
    Core::Manager::Resource->Load<coreSound>  ("effect_swipe_01.wav",                    CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/effect_swipe_01.wav");
    Core::Manager::Resource->Load<coreSound>  ("effect_swipe_02.wav",                    CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/effect_swipe_02.wav");
    Core::Manager::Resource->Load<coreSound>  ("effect_swipe_03.wav",                    CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/effect_swipe_03.wav");
    Core::Manager::Resource->Load<coreSound>  ("effect_tank.wav",                        CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/effect_tank.wav");
    Core::Manager::Resource->Load<coreSound>  ("effect_woosh_01.wav",                    CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/effect_woosh_01.wav");
    Core::Manager::Resource->Load<coreSound>  ("effect_woosh_02.wav",                    CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/effect_woosh_02.wav");
    Core::Manager::Resource->Load<coreSound>  ("enemy_explosion_01.wav",                 CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/enemy_explosion_01.wav");
    Core::Manager::Resource->Load<coreSound>  ("enemy_explosion_02.wav",                 CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/enemy_explosion_02.wav");
    Core::Manager::Resource->Load<coreSound>  ("enemy_explosion_03.wav",                 CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/enemy_explosion_03.wav");
    Core::Manager::Resource->Load<coreSound>  ("enemy_explosion_04.wav",                 CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/enemy_explosion_04.wav");
    Core::Manager::Resource->Load<coreSound>  ("enemy_explosion_05.wav",                 CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/enemy_explosion_05.wav");
    Core::Manager::Resource->Load<coreSound>  ("enemy_explosion_06.wav",                 CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/enemy_explosion_06.wav");
    Core::Manager::Resource->Load<coreSound>  ("enemy_explosion_07.wav",                 CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/enemy_explosion_07.wav");
    Core::Manager::Resource->Load<coreSound>  ("enemy_explosion_08.wav",                 CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/enemy_explosion_08.wav");
    Core::Manager::Resource->Load<coreSound>  ("enemy_explosion_09.wav",                 CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/enemy_explosion_09.wav");
    Core::Manager::Resource->Load<coreSound>  ("enemy_explosion_10.wav",                 CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/enemy_explosion_10.wav");
    Core::Manager::Resource->Load<coreSound>  ("enemy_explosion_11.wav",                 CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/enemy_explosion_11.wav");
    Core::Manager::Resource->Load<coreSound>  ("enemy_explosion_12.wav",                 CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/enemy_explosion_12.wav");
    Core::Manager::Resource->Load<coreSound>  ("environment_cloud.wav",                  CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/environment_cloud.wav");
    Core::Manager::Resource->Load<coreSound>  ("environment_dark.wav",                   CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/environment_dark.wav");
    Core::Manager::Resource->Load<coreSound>  ("environment_desert.wav",                 CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/environment_desert.wav");
    Core::Manager::Resource->Load<coreSound>  ("environment_grass.wav",                  CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/environment_grass.wav");
    Core::Manager::Resource->Load<coreSound>  ("environment_moss.wav",                   CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/environment_moss.wav");
    Core::Manager::Resource->Load<coreSound>  ("environment_sea.wav",                    CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/environment_sea.wav");
    Core::Manager::Resource->Load<coreSound>  ("environment_snow.wav",                   CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/environment_snow.wav");
    Core::Manager::Resource->Load<coreSound>  ("environment_space.wav",                  CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/environment_space.wav");
    Core::Manager::Resource->Load<coreSound>  ("environment_stomach.wav",                CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/environment_stomach.wav");
    Core::Manager::Resource->Load<coreSound>  ("environment_thunder_01.wav",             CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/environment_thunder_01.wav");
    Core::Manager::Resource->Load<coreSound>  ("environment_thunder_02.wav",             CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/environment_thunder_02.wav");
    Core::Manager::Resource->Load<coreSound>  ("environment_thunder_03.wav",             CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/environment_thunder_03.wav");
    Core::Manager::Resource->Load<coreSound>  ("environment_volcano.wav",                CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/environment_volcano.wav");
    Core::Manager::Resource->Load<coreSound>  ("fragment_collect.wav",                   CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/fragment_collect.wav");
    Core::Manager::Resource->Load<coreSound>  ("fragment_impact.wav",                    CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/fragment_impact.wav");
    Core::Manager::Resource->Load<coreSound>  ("helper.wav",                             CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/helper.wav");
    Core::Manager::Resource->Load<coreSound>  ("item_01.wav",                            CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/item_01.wav");
    Core::Manager::Resource->Load<coreSound>  ("item_02.wav",                            CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/item_02.wav");
    Core::Manager::Resource->Load<coreSound>  ("medal_bronze.wav",                       CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/medal_bronze.wav");
    Core::Manager::Resource->Load<coreSound>  ("medal_dark.wav",                         CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/medal_dark.wav");
    Core::Manager::Resource->Load<coreSound>  ("medal_gold.wav",                         CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/medal_gold.wav");
    Core::Manager::Resource->Load<coreSound>  ("medal_platinum.wav",                     CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/medal_platinum.wav");
    Core::Manager::Resource->Load<coreSound>  ("medal_silver.wav",                       CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/medal_silver.wav");
    Core::Manager::Resource->Load<coreSound>  ("menu_button_press.wav",                  CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/menu_button_press.wav");
    Core::Manager::Resource->Load<coreSound>  ("menu_change_button.wav",                 CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/menu_change_button.wav");
    Core::Manager::Resource->Load<coreSound>  ("menu_change_tab.wav",                    CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/menu_change_tab.wav");
    Core::Manager::Resource->Load<coreSound>  ("menu_change_line.wav",                   CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/menu_change_line.wav");
    Core::Manager::Resource->Load<coreSound>  ("menu_msgbox_no.wav",                     CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/menu_msgbox_no.wav");
    Core::Manager::Resource->Load<coreSound>  ("menu_msgbox_show.wav",                   CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/menu_msgbox_show.wav");
    Core::Manager::Resource->Load<coreSound>  ("menu_msgbox_yes.wav",                    CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/menu_msgbox_yes.wav");
    Core::Manager::Resource->Load<coreSound>  ("menu_scroll.wav",                        CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/menu_scroll.wav");
    Core::Manager::Resource->Load<coreSound>  ("menu_start.wav",                         CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/menu_start.wav");
    Core::Manager::Resource->Load<coreSound>  ("menu_sub_in.wav",                        CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/menu_sub_in.wav");
    Core::Manager::Resource->Load<coreSound>  ("menu_sub_out.wav",                       CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/menu_sub_out.wav");
    Core::Manager::Resource->Load<coreSound>  ("menu_switch_disabled.wav",               CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/menu_switch_disabled.wav");
    Core::Manager::Resource->Load<coreSound>  ("menu_switch_enabled.wav",                CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/menu_switch_enabled.wav");
    Core::Manager::Resource->Load<coreSound>  ("player_explosion.wav",                   CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/player_explosion.wav");
    Core::Manager::Resource->Load<coreSound>  ("shield_destroy.wav",                     CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/shield_destroy.wav");
    Core::Manager::Resource->Load<coreSound>  ("shield_hit.wav",                         CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/shield_hit.wav");
    Core::Manager::Resource->Load<coreSound>  ("summary_medal.wav",                      CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/summary_medal.wav");
    Core::Manager::Resource->Load<coreSound>  ("summary_perfect.wav",                    CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/summary_perfect.wav");
    Core::Manager::Resource->Load<coreSound>  ("summary_record.wav",                     CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/summary_record.wav");
    Core::Manager::Resource->Load<coreSound>  ("summary_score.wav",                      CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/summary_score.wav");
    Core::Manager::Resource->Load<coreSound>  ("summary_text.wav",                       CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/summary_text.wav");
    Core::Manager::Resource->Load<coreSound>  ("unlock.wav",                             CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/unlock.wav");
    Core::Manager::Resource->Load<coreSound>  ("weapon_enemy.wav",                       CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/weapon_enemy.wav");
    Core::Manager::Resource->Load<coreSound>  ("weapon_ray.wav",                         CORE_RESOURCE_UPDATE_AUTO,   "data/sounds/weapon_ray.wav");

    coreList<coreString> asPath;
    coreData::FolderScan("data/fonts", "*.ttf",  &asPath);
    coreData::FolderScan("data/fonts", "*.otf",  &asPath);
    coreData::FolderScan("data/fonts", "*.woff", &asPath);

    FOR_EACH(it, asPath)   // # config for default font is ignored, because it was already loaded
    {
        coreConfig oConfig(PRINT("%s.ini", it->c_str()));
        const coreUint8 iHinting = oConfig.GetInt ("Config", "Hinting", TTF_HINTING_LIGHT_SUBPIXEL);
        const coreBool  bKerning = oConfig.GetBool("Config", "Kerning", true);

        coreString sFilename = coreData::StrFilename(it->c_str());
        if(DEFINED(_CORE_EMSCRIPTEN_)) sFilename.replace(".woff", ".ttf");

        Core::Manager::Resource->Load<coreFont>(sFilename.c_str(), CORE_RESOURCE_UPDATE_AUTO, it->c_str(), iHinting, bKerning);
    }

    const coreChar* pcInit = Core::Language->HasString("FONT") ? Core::Language->GetString("FONT") : MENU_FONT_STANDARD;
    Core::Manager::Resource->AssignProxy(Core::Manager::Resource->LoadProxy("dynamic_font"), pcInit);

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_decal_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_decal.vert")
        ->AttachShader("effect_decal.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_decal_single_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_decal.vert")
        ->AttachShader("effect_decal_single.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_decal_light_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_decal.vert")
        ->AttachShader("effect_decal_light.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_decal_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_decal_inst.vert")
        ->AttachShader("effect_decal_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_decal_single_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_decal_inst.vert")
        ->AttachShader("effect_decal_single_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_decal_light_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_decal_inst.vert")
        ->AttachShader("effect_decal_light_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_distortion_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_distortion.vert")
        ->AttachShader("effect_distortion.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_distortion_direct_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_distortion.vert")
        ->AttachShader("effect_distortion_direct.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_distortion_object3d_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_distortion_object3d.vert")
        ->AttachShader("effect_distortion.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_distortion_object3d_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_distortion_object3d_inst.vert")
        ->AttachShader("effect_distortion_object3d_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy.vert")
        ->AttachShader("effect_energy.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_spheric_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_spheric.vert")
        ->AttachShader("effect_energy.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_invert_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_invert.vert")
        ->AttachShader("effect_energy.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_direct_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_direct.vert")
        ->AttachShader("effect_energy.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_flat_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_flat.vert")
        ->AttachShader("effect_energy.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_flat_spheric_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_flat_spheric.vert")
        ->AttachShader("effect_energy.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_flat_invert_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_flat_invert.vert")
        ->AttachShader("effect_energy.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_flat_direct_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_flat_direct.vert")
        ->AttachShader("effect_energy.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_bullet_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_bullet.vert")
        ->AttachShader("effect_energy.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_bullet_spheric_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_bullet_spheric.vert")
        ->AttachShader("effect_energy.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_bullet_invert_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_bullet_invert.vert")
        ->AttachShader("effect_energy.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_bullet_direct_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_bullet_direct.vert")
        ->AttachShader("effect_energy.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_rotated_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_rotated.vert")
        ->AttachShader("effect_energy.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_rotated_spheric_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_rotated_spheric.vert")
        ->AttachShader("effect_energy.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_blink_flat_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_flat.vert")
        ->AttachShader("effect_energy_blink.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_blink_invert_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_invert.vert")
        ->AttachShader("effect_energy_blink.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_blink_flat_spheric_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_flat_spheric.vert")
        ->AttachShader("effect_energy_blink.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_blink_flat_invert_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_flat_invert.vert")
        ->AttachShader("effect_energy_blink.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_inst.vert")
        ->AttachShader("effect_energy_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_invert_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_invert_inst.vert")
        ->AttachShader("effect_energy_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_direct_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_direct_inst.vert")
        ->AttachShader("effect_energy_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_flat_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_flat_inst.vert")
        ->AttachShader("effect_energy_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_flat_spheric_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_flat_spheric_inst.vert")
        ->AttachShader("effect_energy_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_flat_invert_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_flat_invert_inst.vert")
        ->AttachShader("effect_energy_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_flat_direct_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_flat_direct_inst.vert")
        ->AttachShader("effect_energy_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_bullet_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_bullet_inst.vert")
        ->AttachShader("effect_energy_inst.frag")
        ->BindAttribute(BULLET_SHADER_ATTRIBUTE_DEPTH, BULLET_SHADER_ATTRIBUTE_DEPTH_NUM)
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_bullet_spheric_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_bullet_spheric_inst.vert")
        ->AttachShader("effect_energy_inst.frag")
        ->BindAttribute(BULLET_SHADER_ATTRIBUTE_DEPTH, BULLET_SHADER_ATTRIBUTE_DEPTH_NUM)
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_bullet_invert_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_bullet_invert_inst.vert")
        ->AttachShader("effect_energy_inst.frag")
        ->BindAttribute(BULLET_SHADER_ATTRIBUTE_DEPTH, BULLET_SHADER_ATTRIBUTE_DEPTH_NUM)
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_energy_bullet_direct_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_energy_bullet_direct_inst.vert")
        ->AttachShader("effect_energy_inst.frag")
        ->BindAttribute(BULLET_SHADER_ATTRIBUTE_DEPTH, BULLET_SHADER_ATTRIBUTE_DEPTH_NUM)
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_explosion_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_explosion.vert")
        ->AttachShader("effect_explosion.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_frame_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_frame.vert")
        ->AttachShader("effect_frame.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_gust_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_gust.vert")
        ->AttachShader("effect_gust.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_gust_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_gust_inst.vert")
        ->AttachShader("effect_gust_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_headlight_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_headlight.vert")
        ->AttachShader("effect_headlight.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_lightning_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_lightning.vert")
        ->AttachShader("effect_lightning.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_lightning_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_lightning_inst.vert")
        ->AttachShader("effect_lightning_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_outline_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_outline.vert")
        ->AttachShader("effect_outline.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_outline_flat_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_outline_flat.vert")
        ->AttachShader("effect_outline.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_outline_flat_thick_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_outline_flat_thick.vert")
        ->AttachShader("effect_outline.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_outline_bullet_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_outline_bullet.vert")
        ->AttachShader("effect_outline.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_outline_light_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_outline.vert")
        ->AttachShader("effect_outline_light.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_outline_light_thick_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_outline_thick.vert")
        ->AttachShader("effect_outline_light.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_outline_light_bullet_thick_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_outline_bullet_thick.vert")
        ->AttachShader("effect_outline_light.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_outline_direct_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_outline_direct.vert")
        ->AttachShader("effect_outline_direct.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_outline_flat_direct_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_outline_flat_direct.vert")
        ->AttachShader("effect_outline_direct.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_outline_bullet_direct_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_outline_bullet_direct.vert")
        ->AttachShader("effect_outline_direct.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_outline_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_outline_inst.vert")
        ->AttachShader("effect_outline_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_outline_flat_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_outline_flat_inst.vert")
        ->AttachShader("effect_outline_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_outline_flat_thick_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_outline_flat_thick_inst.vert")
        ->AttachShader("effect_outline_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_outline_bullet_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_outline_bullet_inst.vert")
        ->AttachShader("effect_outline_inst.frag")
        ->BindAttribute(BULLET_SHADER_ATTRIBUTE_DEPTH, BULLET_SHADER_ATTRIBUTE_DEPTH_NUM)
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_outline_light_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_outline_inst.vert")
        ->AttachShader("effect_outline_light_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_outline_light_thick_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_outline_thick_inst.vert")
        ->AttachShader("effect_outline_light_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_outline_light_bullet_thick_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_outline_bullet_thick_inst.vert")
        ->AttachShader("effect_outline_light_inst.frag")
        ->BindAttribute(BULLET_SHADER_ATTRIBUTE_DEPTH, BULLET_SHADER_ATTRIBUTE_DEPTH_NUM)
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_outline_direct_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_outline_direct_inst.vert")
        ->AttachShader("effect_outline_direct_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_outline_flat_direct_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_outline_flat_direct_inst.vert")
        ->AttachShader("effect_outline_direct_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_outline_bullet_direct_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_outline_bullet_direct_inst.vert")
        ->AttachShader("effect_outline_direct_inst.frag")
        ->BindAttribute(BULLET_SHADER_ATTRIBUTE_DEPTH, BULLET_SHADER_ATTRIBUTE_DEPTH_NUM)
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_particle_color_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_particle.vert")
        ->AttachShader("effect_particle_color.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_particle_dark_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_particle.vert")
        ->AttachShader("effect_particle_dark.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_particle_fire_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_particle.vert")
        ->AttachShader("effect_particle_fire.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_particle_smoke_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_particle.vert")
        ->AttachShader("effect_particle_smoke.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_shadow_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_shadow.vert")
        ->AttachShader("effect_shadow.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_shadow_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_shadow_inst.vert")
        ->AttachShader("effect_shadow.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_shield_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_shield.vert")
        ->AttachShader("effect_shield.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_snow_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_snow.vert")
        ->AttachShader("effect_snow.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_track_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_track.vert")
        ->AttachShader("effect_track.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_weather_nebula_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_weather_nebula.vert")
        ->AttachShader("effect_weather_nebula.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_weather_rain_cloud_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_weather_rain_cloud.vert")
        ->AttachShader("effect_weather_rain_cloud.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_weather_rain_moss_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_weather_rain_moss.vert")
        ->AttachShader("effect_weather_rain_moss.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_weather_sand_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_weather_sand.vert")
        ->AttachShader("effect_weather_sand.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("effect_weather_snow_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("effect_weather_snow.vert")
        ->AttachShader("effect_weather_snow.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("environment_clouds_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("environment_clouds.vert")
        ->AttachShader("environment_clouds.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("environment_clouds_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("environment_clouds_inst.vert")
        ->AttachShader("environment_clouds_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("environment_ice_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("environment_ice.vert")
        ->AttachShader("environment_ice.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("environment_lava_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("environment_lava.vert")
        ->AttachShader("environment_lava.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("environment_outdoor_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("environment_outdoor.vert")
        ->AttachShader("environment_outdoor.frag")
        ->BindAttribute(OUTDOOR_SHADER_ATTRIBUTE_HEIGHT,   OUTDOOR_SHADER_ATTRIBUTE_HEIGHT_NUM)
        ->BindAttribute(OUTDOOR_SHADER_ATTRIBUTE_POSITION, OUTDOOR_SHADER_ATTRIBUTE_POSITION_NUM)
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("environment_outdoor_glow_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("environment_outdoor.vert")
        ->AttachShader("environment_outdoor_glow.frag")
        ->BindAttribute(OUTDOOR_SHADER_ATTRIBUTE_HEIGHT,   OUTDOOR_SHADER_ATTRIBUTE_HEIGHT_NUM)
        ->BindAttribute(OUTDOOR_SHADER_ATTRIBUTE_POSITION, OUTDOOR_SHADER_ATTRIBUTE_POSITION_NUM)
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("environment_outdoor_light_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("environment_outdoor.vert")
        ->AttachShader("environment_outdoor_light.frag")
        ->BindAttribute(OUTDOOR_SHADER_ATTRIBUTE_HEIGHT,   OUTDOOR_SHADER_ATTRIBUTE_HEIGHT_NUM)
        ->BindAttribute(OUTDOOR_SHADER_ATTRIBUTE_POSITION, OUTDOOR_SHADER_ATTRIBUTE_POSITION_NUM)
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("environment_outdoor_light_glow_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("environment_outdoor.vert")
        ->AttachShader("environment_outdoor_light_glow.frag")
        ->BindAttribute(OUTDOOR_SHADER_ATTRIBUTE_HEIGHT,   OUTDOOR_SHADER_ATTRIBUTE_HEIGHT_NUM)
        ->BindAttribute(OUTDOOR_SHADER_ATTRIBUTE_POSITION, OUTDOOR_SHADER_ATTRIBUTE_POSITION_NUM)
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("environment_rain_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("environment_rain.vert")
        ->AttachShader("environment_rain.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("environment_under_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("environment_under.vert")
        ->AttachShader("environment_under.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("environment_vignette_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("default_2d.vert")
        ->AttachShader("environment_vignette.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("environment_vignette_grey_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("default_2d.vert")
        ->AttachShader("environment_vignette_grey.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("environment_water_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("environment_water.vert")
        ->AttachShader("environment_water.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("full_blur_1x_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("full.vert")
        ->AttachShader("full_blur_1x.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("full_blur_2y_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("full.vert")
        ->AttachShader("full_blur_2y.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("full_post_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("full.vert")
        ->AttachShader("full_post.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("full_post_distorted_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("full.vert")
        ->AttachShader("full_post_distorted.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("full_post_transparent_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("full.vert")
        ->AttachShader("full_post_transparent.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("full_post_chroma_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("full.vert")
        ->AttachShader("full_post_chroma.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("full_post_debug_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("full.vert")
        ->AttachShader("full_post_debug.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("full_transition_fade_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("full.vert")
        ->AttachShader("full_transition_fade.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("full_transition_wipe_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("full.vert")
        ->AttachShader("full_transition_wipe.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("full_transition_curtain_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("full.vert")
        ->AttachShader("full_transition_curtain.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("full_transition_circle_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("full.vert")
        ->AttachShader("full_transition_circle.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("menu_animate_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("menu_animate.vert")
        ->AttachShader("menu_animate.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("menu_border_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("menu_border.vert")
        ->AttachShader("menu_border.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("menu_border_direct_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("menu_border.vert")
        ->AttachShader("menu_border_direct.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("menu_color_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("default_2d.vert")
        ->AttachShader("menu_color.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("menu_fragment_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("menu_fragment.vert")
        ->AttachShader("menu_fragment.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("menu_free_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("menu_free.vert")
        ->AttachShader("menu_free.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("menu_grey_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("default_2d.vert")
        ->AttachShader("menu_grey.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("menu_grey_vignette_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("default_2d.vert")
        ->AttachShader("menu_grey_vignette.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("menu_helper_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("menu_helper.vert")
        ->AttachShader("menu_helper.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("menu_inner_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("menu_inner.vert")
        ->AttachShader("menu_inner.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("menu_segment_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("menu_segment.vert")
        ->AttachShader("menu_segment.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("menu_single_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("default_2d.vert")
        ->AttachShader("menu_single.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("menu_swipe_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("menu_swipe.vert")
        ->AttachShader("menu_swipe.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("menu_swipe_label_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("menu_swipe.vert")
        ->AttachShader("menu_swipe_label.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_ground_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object.vert")
        ->AttachShader("object_ground.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_wave_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object_wave.vert")
        ->AttachShader("object_ground.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_ship_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object.vert")
        ->AttachShader("object_ship.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_ship_glow_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object.vert")
        ->AttachShader("object_ship_glow.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_ship_depth_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object.vert")
        ->AttachShader("object_ship_depth.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_ship_detail_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object.vert")
        ->AttachShader("object_ship_detail.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_ship_blink_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object.vert")
        ->AttachShader("object_ship_blink.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_ship_darkness_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object.vert")
        ->AttachShader("object_ship_darkness.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_ice_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object.vert")
        ->AttachShader("object_ice.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_meteor_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object.vert")
        ->AttachShader("object_meteor.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_meteor_blink_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object.vert")
        ->AttachShader("object_meteor_blink.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_ground_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object_inst.vert")
        ->AttachShader("object_ground_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_wave_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object_wave_inst.vert")
        ->AttachShader("object_ground_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_ship_glow_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object_inst.vert")
        ->AttachShader("object_ship_glow_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_ship_depth_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object_inst.vert")
        ->AttachShader("object_ship_depth_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_ship_detail_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object_inst.vert")
        ->AttachShader("object_ship_detail_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_ship_blink_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader ("object_inst.vert")
        ->AttachShader ("object_ship_blink_inst.frag")
        ->BindAttribute(SHIP_SHADER_ATTRIBUTE_BLINK, SHIP_SHADER_ATTRIBUTE_BLINK_NUM)
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_meteor_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader ("object_inst.vert")
        ->AttachShader ("object_meteor_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_meteor_blink_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader ("object_inst.vert")
        ->AttachShader ("object_meteor_blink_inst.frag")
        ->BindAttribute(SHIP_SHADER_ATTRIBUTE_BLINK, SHIP_SHADER_ATTRIBUTE_BLINK_NUM)
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_board_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object_board.vert")
        ->AttachShader("object_board.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_board_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object_board_inst.vert")
        ->AttachShader("object_board_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_plate_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object_plate.vert")
        ->AttachShader("object_plate.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_plate_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object_plate_inst.vert")
        ->AttachShader("object_plate_inst.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_tile_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object_tile.vert")
        ->AttachShader("object_tile.frag")
        ->Finish();

    d_cast<coreProgram*>(Core::Manager::Resource->Load<coreProgram>("object_tile_inst_program", CORE_RESOURCE_UPDATE_AUTO, NULL)->GetRawResource())
        ->AttachShader("object_tile_inst.vert")
        ->AttachShader("object_tile_inst.frag")
        ->Finish();
}